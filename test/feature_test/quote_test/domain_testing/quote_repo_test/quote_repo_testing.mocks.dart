// Mocks generated by Mockito 5.4.4 from annotations
// in signifydemo/test/feature_test/quote_test/domain_testing/quote_repo_test/quote_repo_testing.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:signifydemo/core/error/failure.dart' as _i6;
import 'package:signifydemo/feature/quote/domain/entity/quote_entity.dart'
    as _i7;
import 'package:signifydemo/feature/quote/domain/repository_impl/quote_repo.dart'
    as _i8;
import 'package:signifydemo/feature/quote/presentation/bloc/quote_event.dart'
    as _i9;
import 'package:signifydemo/feature/quote/presentation/bloc/quote_state.dart'
    as _i2;

import 'quote_repo_testing.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQuoteState_0 extends _i1.SmartFake implements _i2.QuoteState {
  _FakeQuoteState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QuoteRepositoryTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuoteRepositoryTest extends _i1.Mock
    implements _i3.QuoteRepositoryTest {
  MockQuoteRepositoryTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.QuoteEntity>?> getQuote() =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuote,
          [],
        ),
        returnValue:
            _i4.Future<_i5.Either<_i6.Failure, _i7.QuoteEntity>?>.value(),
      ) as _i4.Future<_i5.Either<_i6.Failure, _i7.QuoteEntity>?>);
}

/// A class which mocks [MockQuoteBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockQuoteBloc extends _i1.Mock implements _i3.MockQuoteBloc {
  MockMockQuoteBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set repository(_i8.QuoteRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.QuoteState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeQuoteState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.QuoteState);

  @override
  _i4.Stream<_i2.QuoteState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.QuoteState>.empty(),
      ) as _i4.Stream<_i2.QuoteState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i9.QuoteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i9.QuoteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.QuoteState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i9.QuoteEvent>(
    _i10.EventHandler<E, _i2.QuoteState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i10.Transition<_i9.QuoteEvent, _i2.QuoteState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i10.Change<_i2.QuoteState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
